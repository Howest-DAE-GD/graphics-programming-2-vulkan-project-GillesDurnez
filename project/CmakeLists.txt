set(TARGET_NAME "GP2-Durnez-Gilles")

include(FetchContent)

FetchContent_Declare(
   GLFW
   GIT_REPOSITORY https://github.com/glfw/glfw.git
   GIT_TAG 3.4
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(GLFW)

FetchContent_Declare(
    GLM
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG 1.0.1
    GIT_SHALLOW TRUE
    GIT_PROGRESS TRUE)
FetchContent_MakeAvailable(GLM)

# NOTE: You need the have the vulkan sdk installed yourself to be able to find this package this way.
find_package(Vulkan REQUIRED)

set( SRC_FILES
     "src/main.cpp")

add_executable(${TARGET_NAME} ${SRC_FILES})
target_link_libraries(${TARGET_NAME} PRIVATE Vulkan::Vulkan glfw glm::glm)

# Copying over the assets
# add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
#    COMMAND ${CMAKE_COMMAND} -E copy_directory_if_different
#            ${CMAKE_CURRENT_SOURCE_DIR}/shaders/
#            $<TARGET_FILE_DIR:${TARGET_NAME}>/shaders)


#--------------------------------------------------
#    SHADER COMPILATION
#--------------------------------------------------

# Check if Vulkan SDK has already been found, if not, shaders cannot be compiled
if(NOT Vulkan_FOUND)
    message(FATAL_ERROR "Vulkan not found yet, cannot compile shaders!")
endif()

# Find the glslc executable
find_program(GLSLC_EXECUTABLE glslc HINTS "${Vulkan_GLSLC_EXECUTABLE}")
if(NOT GLSLC_EXECUTABLE)
    message(FATAL_ERROR "glslc not found! Make sure Vulkan SDK is installed and available in PATH.")
else()
    message("glslc.exe found at ${GLSLC_EXECUTABLE}")
endif()

# Set shader directories
set(SHADER_SOURCE_DIR ${CMAKE_SOURCE_DIR}/shaders)
set(SHADER_BINARY_DIR ${CMAKE_BINARY_DIR}/project/shaders)
file(MAKE_DIRECTORY ${SHADER_BINARY_DIR})

# Shader Files
file(GLOB SHADER_SOURCES
  ${SHADER_SOURCE_DIR}/*.vert
  ${SHADER_SOURCE_DIR}/*.frag
)

# Compile the shaders
add_custom_target(CompileShaders ALL COMMENT "Compiling shaders to output directory.")
foreach(SHADER ${SHADER_SOURCES})
    get_filename_component(SHADER_INPUT_NAME ${SHADER} NAME)
    string(REPLACE "." "_" SHADER_OUTPUT_NAME ${SHADER_INPUT_NAME})
    set(SHADER_OUTPUT_DIR "${CMAKE_BINARY_DIR}/project/shaders/${SHADER_OUTPUT_NAME}.spv")

    message("Compiling ${SHADER_INPUT_NAME} to ${SHADER_OUTPUT_NAME}.spv")

    add_custom_command(
        TARGET CompileShaders POST_BUILD
        COMMAND ${GLSLC_EXECUTABLE} ${SHADER} -o ${SHADER_OUTPUT_DIR}
        DEPENDS ${SHADER}
        COMMENT "Compiling ${SHADER_INPUT_NAME} to ${SHADER_OUTPUT_NAME}.spv"
        VERBATIM
    )
endforeach()

# Add CompileShaders as a dependency to project
add_dependencies(${TARGET_NAME} CompileShaders)
