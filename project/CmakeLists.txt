set(TARGET_NAME "GP2-Durnez-Gilles")

include(FetchContent)

FetchContent_Declare(
   GLFW
   GIT_REPOSITORY https://github.com/glfw/glfw.git
   GIT_TAG 3.4
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(GLFW)

FetchContent_Declare(
    GLM
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG 1.0.1
    GIT_SHALLOW TRUE
    GIT_PROGRESS TRUE)
FetchContent_MakeAvailable(GLM)

# NOTE: You need the have the vulkan sdk installed yourself to be able to find this package this way.
find_package(Vulkan REQUIRED)

# VMA
FetchContent_Declare(
    VMA
    GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
    GIT_TAG master  # or a specific tag/commit
)
FetchContent_MakeAvailable(VMA)

# Assimp
FetchContent_Declare(
  assimp
  GIT_REPOSITORY https://github.com/assimp/assimp.git
  GIT_TAG        v5.2.5
  GIT_SHALLOW    TRUE
)
FetchContent_MakeAvailable(assimp)


set( SRC_FILES
    "src/main.cpp"
    "src/Renderer/vkRenderer.cpp"
    "src/Renderer/Window.cpp" 
    "src/Renderer/Device.cpp" 
    "src/Renderer/Instance.cpp" 
    "src/Renderer/SwapChain.cpp" 
    "src/Renderer/Renderpass.cpp"
    "src/Renderer/Resources/Model.cpp"
    "src/Renderer/Pipeline.cpp" 
    "src/Renderer/Resources/Image.cpp" 
    "src/Renderer/Buffer.cpp" 
    "src/Renderer/Resources/Texture.cpp" 
    "src/Renderer/CommandPool.cpp"
    "src/Renderer/Resources/Shader.cpp" 
    "src/Renderer/Resources/Scene.cpp"
    "src/Renderer/Defines.h" 
    "src/Renderer/Camera.h" 
    "src/Time.h" )

add_executable(${TARGET_NAME} ${SRC_FILES})

target_include_directories(${TARGET_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/include)
target_include_directories(${TARGET_NAME} PUBLIC ${vma_SOURCE_DIR}/include)
target_include_directories(${TARGET_NAME} PRIVATE ${assimp_SOURCE_DIR}/include)


target_link_libraries(${TARGET_NAME} PRIVATE Vulkan::Vulkan glfw glm::glm assimp::assimp)
# Copying over the assets
# add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
#    COMMAND ${CMAKE_COMMAND} -E copy_directory_if_different
#            ${CMAKE_CURRENT_SOURCE_DIR}/shaders/
#            $<TARGET_FILE_DIR:${TARGET_NAME}>/shaders)


#--------------------------------------------------
#    SHADER COMPILATION
#--------------------------------------------------

# Check if Vulkan SDK has already been found, if not, shaders cannot be compiled
if(NOT Vulkan_FOUND)
    message(FATAL_ERROR "Vulkan not found yet, cannot compile shaders!")
endif()

# Find the glslc executable
find_program(GLSLC_EXECUTABLE glslc HINTS "${Vulkan_GLSLC_EXECUTABLE}")
if(NOT GLSLC_EXECUTABLE)
    message(FATAL_ERROR "glslc not found! Make sure Vulkan SDK is installed and available in PATH.")
else()
    message("glslc.exe found at ${GLSLC_EXECUTABLE}")
endif()

# Set shader directories
set(SHADER_SOURCE_DIR ${CMAKE_SOURCE_DIR}/shaders)
set(SHADER_BINARY_DIR ${CMAKE_BINARY_DIR}/project/shaders)
file(MAKE_DIRECTORY ${SHADER_BINARY_DIR})

# Shader Files
file(GLOB SHADER_SOURCES
  ${SHADER_SOURCE_DIR}/*.vert
  ${SHADER_SOURCE_DIR}/*.frag
)

# Compile the shaders
add_custom_target(CompileShaders ALL COMMENT "Compiling shaders to output directory.")
foreach(SHADER ${SHADER_SOURCES})
    get_filename_component(SHADER_INPUT_NAME ${SHADER} NAME)
    string(REPLACE "." "_" SHADER_OUTPUT_NAME ${SHADER_INPUT_NAME})
    set(SHADER_OUTPUT_DIR "${CMAKE_BINARY_DIR}/project/shaders/${SHADER_OUTPUT_NAME}.spv")

    message("Compiling ${SHADER_INPUT_NAME} to ${SHADER_OUTPUT_NAME}.spv")

    add_custom_command(
        TARGET CompileShaders POST_BUILD
        COMMAND ${GLSLC_EXECUTABLE} ${SHADER} -o ${SHADER_OUTPUT_DIR} -I ${CMAKE_SOURCE_DIR}/shaders
        DEPENDS ${SHADER}
        COMMENT "Compiling ${SHADER_INPUT_NAME} to ${SHADER_OUTPUT_NAME}.spv"
        VERBATIM
    )
endforeach()

# Add CompileShaders as a dependency to project
add_dependencies(${TARGET_NAME} CompileShaders)

# Copying the textures folder to the output directory
add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_SOURCE_DIR}/textures
            $<TARGET_FILE_DIR:${TARGET_NAME}>/textures
    COMMENT "Copying textures to output directory"
)

add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_SOURCE_DIR}/models
            $<TARGET_FILE_DIR:${TARGET_NAME}>/models
    COMMENT "Copying models to output directory"
)


# ----------------------------------------------
# Download & extract full Sponza ZIP into scenes/
# ----------------------------------------------

include(ExternalProject)

#set(SCENE_DIR ${CMAKE_BINARY_DIR}/scenes/Sponza)
#set(SPONZA_URL "https://github.com/KhronosGroup/glTF-Sample-Assets/archive/refs/heads/main.zip")
#
#ExternalProject_Add(SponzaScene
#    URL ${SPONZA_URL}
#    DOWNLOAD_NAME sponza.zip
#    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}
#    SOURCE_DIR ${CMAKE_BINARY_DIR}/SponzaScene-src
#    CONFIGURE_COMMAND ""
#    BUILD_COMMAND ""
#    INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory ${SCENE_DIR}
#                    COMMAND ${CMAKE_COMMAND} -E copy_directory
#                        ${CMAKE_BINARY_DIR}/SponzaScene-src/Models/Sponza/glTF
#                        ${SCENE_DIR}
#    UPDATE_COMMAND ""
#    LOG_DOWNLOAD ON
#)

set(SCENE_DIR ${CMAKE_BINARY_DIR}/scenes/Sponza)
set(SPONZA_URL "https://github.com/KhronosGroup/glTF-Sample-Assets/archive/refs/heads/main.zip")
set(SPONZA_ZIP ${CMAKE_BINARY_DIR}/sponza.zip)

ExternalProject_Add(SponzaScene
    URL ${SPONZA_URL}
    DOWNLOAD_NAME sponza.zip
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}
    SOURCE_DIR ${CMAKE_BINARY_DIR}/SponzaScene-src
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND
        ${CMAKE_COMMAND} -E make_directory ${SCENE_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_BINARY_DIR}/SponzaScene-src/Models/Sponza/glTF
            ${SCENE_DIR}
        COMMAND ${CMAKE_COMMAND} -E remove ${SPONZA_ZIP}
    UPDATE_COMMAND ""
    LOG_DOWNLOAD ON
)


add_dependencies(${TARGET_NAME} SponzaScene)